import { path_resolve, cwd_relative, create_web_server } from './_builtins.jsy'

const bind_as_url = (protocol, port) => addr => ::
  const host = addr.includes(':') ? `[${addr}]` : addr
  return `${protocol}//${host}:${port}`


export function qsrv_core_options(options) ::
  return @{} __proto__: options
    root: path_resolve @ options.root
    fallback: options.fallback
      ? path_resolve @ options.fallback
      : null
    port: + (0 || options.port)
    include_headers: @{}
        'content-length': true === options.content_length


export default qsrv_core_server
export function qsrv_core_server(options, bind_handler) ::
  const handler = (options.bind_handler || bind_handler) @ options

  const websvr = (options.create_web_server || create_web_server) @ options
  websvr.on @ 'request', handler

  ::
    const {port, listen_addr} = options
    if listen_addr ::
      websvr.listen @ +port, listen_addr
    else websvr.listen @ +port

  options.ready = new Promise @\ resolve, reject ::
    websvr.on @ 'error', reject

    websvr.on @ 'listening', @::
      const {port, address, family} = websvr.address()
      const protocol = undefined === websvr.requestCert ? 'http:' : 'https:'
      const as_url = bind_as_url(protocol, port)
      const url = as_url(address)
      Object.assign @ options, @{} protocol, url, as_url
      resolve @: url, port, address, family

  return websvr


export function qsrv_banner(options) ::
  const {root, fallback, all_urls} = options || this
  let msg = @ `
      root: ${cwd_relative(root) || '.'}
      fallback: ${fallback ? cwd_relative(fallback) : null}
      port: ${options.port}
    `

  if options.show_ips && all_urls ::
    msg += '\n'
    for const url of all_urls.IPv4 ::
      msg += `  ${url}\n`

  return msg

