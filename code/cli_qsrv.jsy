import {version} from '../package.json'
import qsrv_sevrer from 'qsrv'

import @{}
  opt_argv_context
  opt_concat
  opt_assign_creds
from './cli_utils.jsy'
export * from './cli_utils.jsy'


const qsrv_help = @{}
  '--root': ['[PATH]', 'set the root path for file serving', '.']
  '-f': 'alias for --fallback'
  '--fallback': ['[index.html]', 'set the fallback html file', 'index.html']
  '--no-fallback': 'disable fallback html file'

  ' 0 ': true

  '--dg': ['[DGRAM PORT]', 'relay specified datagram ports', '[]'],
  '--dg-all': ['', 'relay datagram ports as subscribed by the browser', 'false']

  ' 1 ': true

  '--no-reload': 'disable reload watching'
  '-w': 'alias for --watch'
  '--watch': ['[PATH]', 'watch the path for changes', '{root}']
  '--': ['[... PATHS]', 'watch each path in the remaining arguments']

  ' 2 ': true

  '-p': ['[PORT]', 'alias for --port', '$QSRV_PORT or 8088']
  '--port': ['[PORT]', 'set the listening port', '$QSRV_PORT or 8088']
  '--listen': ['[IP4-ADDR]', 'set the default listing address', '$QSRV_ADDR or 0.0.0.0']

  ' 3 ': true

  '--tls': ['[PATH]', 'set the TLS path per https://mkcert.dev', '$QSRV_TLS']
  '--cert': ['[PEM-FILE]', 'set the TLS public certificate path', '$QSRV_TLS_CERT']
  '--key': ['[PEM-FILE]', 'set the TLS private key path', '$QSRV_TLS_KEY']


const qsrv_argv = @{}
  __proto__: opt_argv_context
  help: qsrv_help
  show_help_banner() ::
    console.log()
    console.log @ `Quick Dev Server (qsrv v${version}) options:`
    console.log()


  '--root' (opt, tip, argv) :: opt.root = argv.shift()
  '-f' (opt, tip, argv) :: opt.fallback = argv.shift()
  '--fallback' (opt, tip, argv) :: opt.fallback = argv.shift()
  '--no-fallback' (opt, tip, argv) :: opt.fallback = null
  '-p' (opt, tip, argv) :: opt.port = + argv.shift()
  '--port' (opt, tip, argv) :: opt.port = + argv.shift()
  '--listen' (opt, tip, argv) :: opt.listen_addr = argv.shift()

  '-w' (opt, tip, argv) :: opt_concat @ opt, 'reload', argv.splice(0,1)
  '--watch' (opt, tip, argv) :: opt_concat @ opt, 'reload', argv.splice(0,1)
  '--' (opt, tip, argv) :: opt_concat @ opt, 'reload', argv.splice(0, argv.length)
  '--no-reload' (opt, tip, argv) :: opt.reload = false

  '--dg' (opt, tip, argv) :: opt_concat @ opt, 'dg_relay', argv.shift()
  '--dg-all' (opt, tip, argv) :: opt.dg_relay = true

  '--tls' (opt, tip, argv) :: opt_assign_creds @ opt, argv.shift()
  '--cert' (opt, tip, argv) :: opt_assign_creds @ opt, argv.shift(), 'cert'
  '--key' (opt, tip, argv) :: opt_assign_creds @ opt, argv.shift(), 'key'

  '--debug' (opt, tip, argv) :: opt.debug = true

  next_arg(opt, tip) :: opt_concat @ opt, 'lsdir', [tip]


export function opt_qsrv_tls(opt, env) ::
  const { QSRV_TLS, QSRV_TLS_CERT, QSRV_TLS_KEY } = env

  if QSRV_TLS :: opt_assign_creds @ opt, QSRV_TLS
  if QSRV_TLS_CERT :: opt_assign_creds @ opt, QSRV_TLS_CERT, 'cert'
  if QSRV_TLS_KEY :: opt_assign_creds @ opt, QSRV_TLS_KEY, 'key'

  return opt

export default qsrv_main
export async function qsrv_main(argv = process.argv.slice(2), env = process.env) ::
  try ::
    const opt = @{}
      port: +env.QSRV_PORT || 8080
      listen_addr: env.QSRV_ADDR || '0.0.0.0'
      lsdir: [] // previously ['./docs']

      ... opt_qsrv_tls({}, env)
      ... qsrv_argv.parse(argv)

    if opt.debug :: console.dir(opt)
    return await qsrv_sevrer(opt)

  catch (err) ::
    console.error('')
    console.error(err)
    console.error('')
    process.exit(1)


export function show_banner(qsrv) ::
  let changes=0

  display()
  qsrv.when_changed @=> changes++
  qsrv.show_changed()

  setInterval( display, 60000 ).unref() // every minute

  function display() ::
    console.log('\x1Bc')
    console.log @ `Quick Dev Server (qsrv v${version})`, {changes}
    console.log @  qsrv.banner()
