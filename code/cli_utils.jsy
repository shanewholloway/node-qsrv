import {resolve as path_resolve} from 'path'
import {readFileSync} from 'fs'


export const opt_argv_context = @{}
  parse(argv) ::
    const opt = {}
    argv = Array.from(argv)
    while argv.length ::
      const tip = argv.shift()
      if tip.startsWith('-') ::
        this[tip](opt, tip, argv)
      else ::
        this.next_arg(opt, tip)

    return opt

  '--help' (otp, tip, argv) ::
    const {help} = this
    const topic_list = 0 !== argv.length ? argv : Object.keys(help)

    let output = [], max_dfn=0
    for let topic of topic_list ::
      if ' ' === topic[0] ::
        output.push({})
        continue

      if '-' !== topic[0] ::
        topic = help['-'+topic] ? '-'+topic
          : '--'+topic

      const info = help[topic]
      let dfn=`${topic}`, msg

      if !info ::
        msg = `No help for unknown option "${topic}"`
      else if Array.isArray(info) ::
        dfn += ` ${info[0]}`
        msg = info[1]
        if undefined !== info[2] ::
          msg += ` (default ${info[2]})`

      else if 'string' === typeof info ::
        msg = info

      max_dfn = Math.max(max_dfn, dfn.length)
      output.push({dfn, msg})


    return this.show_help(output, max_dfn)

  show_help(help_output, max_dfn) ::
    this.show_help_banner()
    this.show_help_body(help_output, max_dfn)
    this.show_help_footer()
    process.exit(0)

  show_help_banner() ::
    console.log()

  show_help_body(help_output, max_dfn) ::
    for const {dfn, msg} of help_output ::
      if dfn ::
        console.log(`  ${dfn.padEnd(1+max_dfn,' ')} ${msg}`)
      else :: console.log()

  show_help_footer() ::
    console.log()
    console.log()

export function opt_concat(opt, key, rest) ::
  let prev = opt[key]
  if undefined === prev :: prev = []
  else if !Array.isArray(prev) ::
    console.error(`\nInvalid list argument for "${key}".\n  previous: %o\n  concat: %o\n\n`, prev, rest)
    throw new Error(`Invalid list argument`)

  return opt[key] = prev.concat(rest)


export function opt_assign_creds(opt, base, attrs) ::
  const creds = opt.credentials = opt.credentials || {}

  base = path_resolve(base || '.')
  if 'string' === typeof attrs ::
    creds[attrs] = readFileSync(path_resolve(base))
    return creds

  if !attrs && '.' !== base ::
    // attempt using mkcert.dev format
    const key_fname = base.replace(/\.pem$/, '') + '-key.pem'
    const key = _readFileOrNull(key_fname)
    const cert = key ? _readFileOrNull(base) || _readFileOrNull(base+'.pem') : null
    if cert ::
      creds.key = key
      creds.cert = cert
      return creds

  // if unset, attempt using cert.pem and key.pem naming convention
  if ! attrs :: attrs = {cert:'cert.pem', key:'key.pem'}
  for const key in attrs ::
    creds[key] = readFileSync(path_resolve(base, attrs[key]))

  return opt.credentials = creds


function _readFileOrNull(...args) ::
  try :: return readFileSync(...args) 
  catch (err) :: return null

