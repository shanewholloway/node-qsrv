const timestamp_b36 = (ts_dur=1000) =>
  (0 | (Date.now() / ts_dur)).toString(36)

export const livereload_script = lr_path => ::() `{
  const ts0 = new Date(), _fmt = 'color: orange; font-weight: bold'
  const lr = new EventSource('${lr_path}')
  lr.onmessage = evt => {
    lr.onopen = lr.onmessage

    const ts = new Date(evt.data)
    console.log('%c[QSRV]: reload %o s at %s',
      _fmt, (ts-ts0)/1000, ts.toLocaleTimeString())

    location.reload(true) }

  console.log('%c[QSRV]: monitoring for changes', _fmt)
  }`

export function bind_livereload(options) ::
  const lr_path = 'dynamic' === options.reload
    ? `/livereload-${timestamp_b36(60000)}`
    : '/livereload'

  const js_src = livereload_script(lr_path)
  let src_suffix = (options.src_suffix || '')
  src_suffix += `<script>${js_src}</script>`

  const lr_subscribers = new Set()
  ::
    const on_ping = sse_broadcast.bind @
      null, lr_subscribers, 'ping'
    setInterval @ on_ping, 60000

  ::
    const on_changed = sse_broadcast.bind @
      null, lr_subscribers, 'message'
    options.when_changed @ on_changed

  :: // end the connections "nicely"
    options.at_exit.then @::
      for const resp of lr_subscribers ::
        resp.end()
      lr_subscribers.clear()


  Object.assign @ options, @{}
    src_suffix,

    [`path ${lr_path}`](resp, ctx) ::
      resp.writeHead @ 200, @{}
        'Access-Control-Allow-Origin': '*'
        'Cache-Control': 'no-cache'
        'Content-Type': 'text/event-stream'
        'Connection': 'keep-alive'

      lr_subscribers.add(resp)
      ctx.req.once @ 'close', @::
        lr_subscribers.delete(resp)

      sse_broadcast @ [resp], 'connected', true
  
    [`path ${lr_path}.js`](resp, ctx) ::
      resp.writeHead @ 200, @{}
        'Access-Control-Allow-Origin': '*'
        'Content-Type': 'applicaiton/javascript'
      resp.write(js_src)
      resp.end()


function sse_broadcast(lr_subscribers, evt, data) ::
  if ! data :: data = new Date().toISOString()
  for const resp of lr_subscribers ::
    resp.write @ `event: ${evt}\ndata: ${data}\n\n`

