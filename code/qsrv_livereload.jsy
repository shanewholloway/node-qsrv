import {create_sse_context} from './sse_handler.jsy'

const timestamp_b36 = (ts_dur=1000) =>
  (0 | (Date.now() / ts_dur)).toString(36)

const default_livereload_script = @\ lr_path ::
  const ts0 = new Date(), _fmt = 'color: orange; font-weight: bold'

  const lr = new EventSource(lr_path)
  lr.onmessage = @\ evt ::
    lr.onopen = lr.onmessage

    const info = JSON.parse @ evt.data || null
    if Array.isArray(info) ::
      const res = info.map @ lr_notify
      if ! res.some(Boolean) ::
        return

    lr_reload()

  console.log @ '%c[QSRV]: monitoring for changes', _fmt

  function lr_notify(detail) ::
    let reload = true
    const eobj = @{} detail, cancelable: true

    console.info @ '%c[QSRV]: change for %o', _fmt, detail
    for const evt_name of [`qsrv-${detail[0]}`, 'qsrv'] ::
      if ! window.dispatchEvent @ new CustomEvent(evt_name, eobj) ::
        reload = false

    if reload ::
      console.log @ '%c[QSRV]: reloading for %o', _fmt, detail
    return reload

  function lr_reload() ::
    const ts = new Date()
    console.log @ '%c[QSRV]: reload %o s at %s',
      _fmt, (ts-ts0)/1000, ts.toLocaleTimeString()
    location.reload(true)


export function bind_livereload(options) ::
  const lr_path = 'dynamic' === options.reload
    ? `/livereload-${timestamp_b36(60000)}`
    : '/livereload'

  const js_src = options.livereload_script
    || `{(${default_livereload_script})('${lr_path}')}`

  let src_suffix = (options.src_suffix || '')
  src_suffix += `<script>${js_src}</script>`


  const lr_sse = create_sse_context()
  options.when_changed @
    lr_sse.sse_json_send_all

  // end the connections "nicely"
  options.at_exit.then @
    lr_sse.sse_end

  Object.assign @ options, @{}
    src_suffix,

    [`path ${lr_path}`]: lr_sse.sse_handler
    [`path ${lr_path}.js`](resp, ctx) ::
      resp.writeHead @ 200, @{}
        'Access-Control-Allow-Origin': '*'
        'Access-Control-Allow-Headers': '*'
        'Content-Type': 'applicaiton/javascript'
      resp.write(js_src)
      resp.end()

