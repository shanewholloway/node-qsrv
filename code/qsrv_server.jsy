import { create_web_server } from './_builtins.jsy'
import { qsrv_core_server, qsrv_core_options, qsrv_banner } from './qsrv_core.jsy'

import { bind_qsrv_handler, send_file, send_index, send_fallback } from './qsrv_handler.jsy'
import { bind_livereload } from './qsrv_livereload.jsy'
import { bind_change_api, bind_watcher, watchdir } from './qsrv_watcher.jsy'
import { bind_exit_api } from './at_exit.jsy'
import { bind_urls_for_interfaces } from './net_utils.jsy'
import { bind_lsdir } from './lsdir_json.jsy'
import { bind_dgram_relay } from './qsrv_dgram_relay.jsy'

export const qsrv_prototype = @{}
  __proto__: null
  create_web_server, banner: qsrv_banner
  send_file, send_index, send_fallback, bind_handler: bind_qsrv_handler,

  bind_exit_api, bind_change_api,
  bind_watcher, watchdir,
  bind_livereload,
  bind_lsdir,
  bind_dgram_relay,

export const qsrv_options = @{}
  root: '.', fallback: 'index.html'
  port: 0, listen_addr: '0.0.0.0'
  dg_listen_addr: '127.0.0.1'
  reload: true,
  lsdir: null,


export default qsrv_server
export async function qsrv_server(options={}) ::
  options = qsrv_core_options @:
    __proto__: qsrv_prototype
    ... qsrv_options, ... options

  await qsrv_liveness(options)
  await qsrv_core_server(options)
  bind_urls_for_interfaces(options)

  await qsrv_composed_ready(options)
  return options


export async function qsrv_composed_ready(options) ::
  if options.on_init ::
    await options.on_init(options)

  await options.ready
  if options.on_ready ::
    await options.on_ready(options)

  return options


export function qsrv_liveness(options) ::
  options.bind_exit_api @ options
  options.bind_change_api @ options
  ::
    let {reload, root, lsdir, dg_relay} = options
    if reload ::
      options.bind_livereload @ options
      options.bind_watcher @ options,
        true === reload ? [root] : [... reload]

    if lsdir ::
      options.lsdir =
        options.bind_lsdir @ options, lsdir

    if dg_relay ::
      options.dg_relay = 
        options.bind_dgram_relay @ options, dg_relay

