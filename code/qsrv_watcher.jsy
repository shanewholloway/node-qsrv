import { fs, fs_p, path_join, path_basename, path_resolve } from './_builtins.jsy'


export function bind_change_api(options) ::
  const subs = []
  let updates = {}

  const _tick_ = debounced @::
    const p = Promise.resolve @
      Object.values @ updates
    updates = {}

    for const fn of subs ::
      p.then(fn)

  Object.assign @ options, @{}
    log_changed() ::
      subs.push @=> console.log @ '[QSRV change detected]'

    when_changed(notify) ::
      subs.push(notify)

    notify_changed(change_args) ::
      updates[change_args] = change_args
      _tick_()


export function bind_watcher({watchdir, notify_changed}, watch_paths, on_changed) ::
  on_changed = on_changed || notify_changed

  for const wpath of watch_paths ::
    const full_wpath = path_resolve(wpath)
    watchdir @ full_wpath, @=> on_changed @# 'watch', wpath


export const watchdir = @
  'linux' === process.platform ? watchdir_linux
  : watchdir_builtin


const _ignore_paths = new Set @#
  '.git', '.hg', '.svn', '.cvs', 'node_modules'

export async function watchdir_linux(root_path, cb) ::
  const wopt = @{} persistent: false
  const q = []
  ::
    const stat = await fs_p.stat(root_path).catch(_noop)
    if ! stat :: return
    if stat.isDirectory() ::
      q.push @ root_path
    else ::
      // allow watching specific files (like index.html)
      fs.watch @ root_path, wopt, cb

  while 0 !== q.length ::
    const cur_path = q.shift()

    if '.' === cur_path[0] || _ignore_paths.has @ path_basename(cur_path) ::
      continue

    fs.watch @ cur_path, wopt, cb

    const fs_dir = await fs_p.opendir(cur_path)
    for await const dirent of fs_dir ::
      const e_path = path_join @ cur_path, dirent.name
      if dirent.isDirectory() ::
        q.push @ e_path


export async function watchdir_builtin(root_path, cb) ::
  const stat = await fs_p.stat(root_path).catch(_noop)
  if ! stat :: return

  const wopt = @{} recursive: true, persistent: false
  return fs.watch @ root_path, wopt, cb


export function debounced(cb, ts_duration=50) ::
  let tid, ts, p0 = Promise.resolve()
  return @::
    ts = ts_duration + Date.now()
    if ! tid :: p0.then(tick)

  function tick() ::
    const now = Date.now()
    tid = clearTimeout(tid)
    if ts >= now ::
      tid = setTimeout @ tick, ts - now
    else p0.then(cb)

function _noop() ::
